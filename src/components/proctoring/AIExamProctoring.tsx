import { useState, useEffect, useRef, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield, 
  Eye, 
  Camera, 
  Monitor, 
  Mic, 
  MicOff,
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  User,
  Lock,
  Unlock,
  Play,
  Pause,
  Square,
  Volume2,
  VolumeX,
  Maximize,
  Minimize,
  RotateCw,
  Settings,
  Flag,
  UserCheck,
  Users,
  Brain,
  Zap,
  Target,
  TrendingUp,
  Activity,
  Wifi,
  WifiOff,
  Smartphone,
  Laptop,
  HeadphonesIcon,
  MousePointer,
  Keyboard,
  Info,
  FileText,
  Download,
  Upload,
  Share2,
  RefreshCw,
  Search,
  Filter,
  BarChart3,
  PieChart,
  LineChart,
  AlertCircle,
  XCircle,
  MinusCircle
} from 'lucide-react';
import { cn } from '@/lib/utils';
import useAuth from '@/hooks/useAuth';
import { formatDistanceToNow } from 'date-fns';
import { toast } from 'sonner';

interface ProctoringSettings {
  faceDetection: boolean;
  eyeTracking: boolean;
  audioMonitoring: boolean;
  screenRecording: boolean;
  tabSwitchingDetection: boolean;
  fullScreenEnforcement: boolean;
  mouseTrackingEnabled: boolean;
  keystrokePatternAnalysis: boolean;
  multiplePersonDetection: boolean;
  phoneDetection: boolean;
  suspiciousObjectDetection: boolean;
  roomScanRequired: boolean;
  identityVerification: boolean;
  allowedBrowsers: string[];
  examDuration: number; // minutes
  warningThreshold: number;
  autoSubmitOnViolation: boolean;
}

interface ViolationEvent {
  id: string;
  timestamp: Date;
  type: 'face_not_detected' | 'multiple_faces' | 'eye_tracking_lost' | 'tab_switch' | 'exit_fullscreen' | 
        'suspicious_audio' | 'phone_detected' | 'unauthorized_person' | 'suspicious_object' | 
        'unusual_keyboard_pattern' | 'extended_inactivity' | 'network_interruption';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  evidence?: {
    screenshot?: string;
    audioClip?: string;
    metadata?: Record<string, any>;
  };
  autoGenerated: boolean;
  reviewed: boolean;
}

interface ExamSession {
  id: string;
  studentId: string;
  examId: string;
  startTime: Date;
  endTime?: Date;
  status: 'preparing' | 'in_progress' | 'paused' | 'completed' | 'terminated';
  violations: ViolationEvent[];
  integrityScore: number; // 0-100
  behaviorAnalysis: {
    averageResponseTime: number;
    typingPattern: 'consistent' | 'irregular' | 'suspicious';
    eyeMovementPattern: 'normal' | 'erratic' | 'unfocused';
    facialExpression: 'focused' | 'distracted' | 'stressed' | 'suspicious';
    activityLevel: 'low' | 'normal' | 'high';
  };
  environmentChecks: {
    roomScan: boolean;
    identityVerified: boolean;
    deviceCompliant: boolean;
    networkStable: boolean;
  };
}

interface AIExamProctoringProps {
  examId: string;
  studentId?: string;
  isProctor?: boolean;
  className?: string;
}

export function AIExamProctoring({ examId, studentId, isProctor = false, className }: AIExamProctoringProps) {
  const { user } = useAuth();
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [currentSession, setCurrentSession] = useState<ExamSession | null>(null);
  const [violations, setViolations] = useState<ViolationEvent[]>([]);
  const [integrityScore, setIntegrityScore] = useState(100);
  const [activeTab, setActiveTab] = useState<'monitor' | 'violations' | 'analytics' | 'settings'>('monitor');

  // Real-time monitoring state
  const [faceDetected, setFaceDetected] = useState(true);
  const [eyeContactMaintained, setEyeContactMaintained] = useState(true);
  const [audioLevelNormal, setAudioLevelNormal] = useState(true);
  const [isFullScreen, setIsFullScreen] = useState(true);
  const [networkStable, setNetworkStable] = useState(true);
  const [environmentSecure, setEnvironmentSecure] = useState(true);

  // Proctoring settings
  const [settings, setSettings] = useState<ProctoringSettings>({
    faceDetection: true,
    eyeTracking: true,
    audioMonitoring: true,
    screenRecording: true,
    tabSwitchingDetection: true,
    fullScreenEnforcement: true,
    mouseTrackingEnabled: true,
    keystrokePatternAnalysis: true,
    multiplePersonDetection: true,
    phoneDetection: true,
    suspiciousObjectDetection: true,
    roomScanRequired: true,
    identityVerification: true,
    allowedBrowsers: ['Chrome', 'Firefox', 'Safari', 'Edge'],
    examDuration: 120,
    warningThreshold: 3,
    autoSubmitOnViolation: false
  });

  // Mock exam session
  useEffect(() => {
    const mockSession: ExamSession = {
      id: `session-${examId}`,
      studentId: studentId || user?.id || 'student-1',
      examId,
      startTime: new Date(),
      status: 'preparing',
      violations: [],
      integrityScore: 100,
      behaviorAnalysis: {
        averageResponseTime: 2.5,
        typingPattern: 'consistent',
        eyeMovementPattern: 'normal',
        facialExpression: 'focused',
        activityLevel: 'normal'
      },
      environmentChecks: {
        roomScan: false,
        identityVerified: false,
        deviceCompliant: false,
        networkStable: true
      }
    };
    setCurrentSession(mockSession);
  }, [examId, studentId, user]);

  // Initialize monitoring systems
  const initializeMonitoring = useCallback(async () => {
    try {
      // Request camera and microphone access
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { width: 640, height: 480 },
        audio: true
      });

      streamRef.current = stream;
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }

      // Initialize AI monitoring systems
      await initializeFaceDetection();
      await initializeEyeTracking();
      await initializeAudioAnalysis();
      await initializeEnvironmentScan();

      setIsInitialized(true);
      toast.success('Proctoring systems initialized successfully');
    } catch (error) {
      console.error('Failed to initialize proctoring:', error);
      toast.error('Failed to access camera/microphone');
    }
  }, []);

  // Simulated AI monitoring functions
  const initializeFaceDetection = async () => {
    // Simulate face detection AI initialization
    console.log('Face detection AI initialized');
  };

  const initializeEyeTracking = async () => {
    // Simulate eye tracking AI initialization
    console.log('Eye tracking AI initialized');
  };

  const initializeAudioAnalysis = async () => {
    // Simulate audio analysis AI initialization
    console.log('Audio analysis AI initialized');
  };

  const initializeEnvironmentScan = async () => {
    // Simulate environment scanning
    console.log('Environment scanning initialized');
  };

  // Start monitoring
  const startMonitoring = () => {
    setIsMonitoring(true);
    setCurrentSession(prev => prev ? { ...prev, status: 'in_progress' } : null);
    
    // Start AI monitoring loops
    startFaceDetectionLoop();
    startEyeTrackingLoop();
    startAudioMonitoringLoop();
    startEnvironmentMonitoringLoop();
    
    toast.success('Exam monitoring started');
  };

  // Stop monitoring
  const stopMonitoring = () => {
    setIsMonitoring(false);
    setCurrentSession(prev => prev ? { ...prev, status: 'completed', endTime: new Date() } : null);
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
    }
    
    toast.success('Exam monitoring stopped');
  };

  // Simulated monitoring loops
  const startFaceDetectionLoop = () => {
    const interval = setInterval(() => {
      if (!isMonitoring) {
        clearInterval(interval);
        return;
      }
      
      // Simulate face detection
      const facePresent = Math.random() > 0.1; // 90% chance face is detected
      setFaceDetected(facePresent);
      
      if (!facePresent) {
        addViolation({
          type: 'face_not_detected',
          severity: 'high',
          description: 'Student face not detected in camera feed'
        });
      }
    }, 2000);
  };

  const startEyeTrackingLoop = () => {
    const interval = setInterval(() => {
      if (!isMonitoring) {
        clearInterval(interval);
        return;
      }
      
      // Simulate eye tracking
      const eyeContact = Math.random() > 0.15; // 85% chance of proper eye contact
      setEyeContactMaintained(eyeContact);
      
      if (!eyeContact) {
        addViolation({
          type: 'eye_tracking_lost',
          severity: 'medium',
          description: 'Student looking away from screen for extended period'
        });
      }
    }, 3000);
  };

  const startAudioMonitoringLoop = () => {
    const interval = setInterval(() => {
      if (!isMonitoring) {
        clearInterval(interval);
        return;
      }
      
      // Simulate audio analysis
      const audioNormal = Math.random() > 0.05; // 95% chance audio is normal
      setAudioLevelNormal(audioNormal);
      
      if (!audioNormal) {
        addViolation({
          type: 'suspicious_audio',
          severity: 'medium',
          description: 'Suspicious audio detected (possible conversation)'
        });
      }
    }, 5000);
  };

  const startEnvironmentMonitoringLoop = () => {
    const interval = setInterval(() => {
      if (!isMonitoring) {
        clearInterval(interval);
        return;
      }
      
      // Simulate environment monitoring
      const environmentOk = Math.random() > 0.03; // 97% chance environment is secure
      setEnvironmentSecure(environmentOk);
      
      if (!environmentOk) {
        const violationTypes = ['phone_detected', 'unauthorized_person', 'suspicious_object'];
        const randomType = violationTypes[Math.floor(Math.random() * violationTypes.length)];
        
        addViolation({
          type: randomType as any,
          severity: 'high',
          description: `Environment security issue: ${randomType.replace('_', ' ')}`
        });
      }
    }, 8000);
  };

  // Add violation
  const addViolation = (violation: Omit<ViolationEvent, 'id' | 'timestamp' | 'autoGenerated' | 'reviewed'>) => {
    const newViolation: ViolationEvent = {
      id: `violation-${Date.now()}`,
      timestamp: new Date(),
      autoGenerated: true,
      reviewed: false,
      ...violation
    };

    setViolations(prev => [...prev, newViolation]);
    
    // Update integrity score
    const penalty = violation.severity === 'critical' ? 20 : 
                   violation.severity === 'high' ? 10 : 
                   violation.severity === 'medium' ? 5 : 2;
    
    setIntegrityScore(prev => Math.max(0, prev - penalty));
    
    // Show toast notification
    toast.error(`Violation detected: ${violation.description}`);
  };

  // Get monitoring status
  const getMonitoringStatus = () => {
    const checks = [
      { name: 'Face Detection', status: faceDetected, icon: User },
      { name: 'Eye Tracking', status: eyeContactMaintained, icon: Eye },
      { name: 'Audio Monitoring', status: audioLevelNormal, icon: Volume2 },
      { name: 'Full Screen', status: isFullScreen, icon: Maximize },
      { name: 'Network', status: networkStable, icon: Wifi },
      { name: 'Environment', status: environmentSecure, icon: Shield }
    ];

    return checks;
  };

  // Get violation stats
  const getViolationStats = () => {
    const stats = {
      total: violations.length,
      critical: violations.filter(v => v.severity === 'critical').length,
      high: violations.filter(v => v.severity === 'high').length,
      medium: violations.filter(v => v.severity === 'medium').length,
      low: violations.filter(v => v.severity === 'low').length
    };

    return stats;
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-100 border-red-200';
      case 'high': return 'text-orange-600 bg-orange-100 border-orange-200';
      case 'medium': return 'text-yellow-600 bg-yellow-100 border-yellow-200';
      case 'low': return 'text-blue-600 bg-blue-100 border-blue-200';
      default: return 'text-gray-600 bg-gray-100 border-gray-200';
    }
  };

  const getViolationIcon = (type: string) => {
    const iconMap = {
      'face_not_detected': User,
      'multiple_faces': Users,
      'eye_tracking_lost': Eye,
      'tab_switch': Monitor,
      'exit_fullscreen': Minimize,
      'suspicious_audio': Volume2,
      'phone_detected': Smartphone,
      'unauthorized_person': UserCheck,
      'suspicious_object': Flag,
      'unusual_keyboard_pattern': Keyboard,
      'extended_inactivity': Clock,
      'network_interruption': WifiOff
    };
    return iconMap[type as keyof typeof iconMap] || AlertTriangle;
  };

  return (
    <div className={cn("space-y-6", className)}>
      {/* Header */}
      <Card className="border-blue-200 bg-gradient-to-r from-blue-50 to-purple-50">
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="h-16 w-16 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                <Shield className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">AI Exam Proctoring</h1>
                <p className="text-gray-600">Advanced monitoring with computer vision and behavioral analysis</p>
                <div className="flex items-center gap-4 mt-2">
                  <Badge className={cn(
                    "flex items-center gap-1",
                    isMonitoring ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"
                  )}>
                    <Activity className="h-3 w-3" />
                    {isMonitoring ? 'Active Monitoring' : 'Standby'}
                  </Badge>
                  <Badge className={cn(
                    "flex items-center gap-1",
                    integrityScore >= 80 ? "bg-green-100 text-green-800" :
                    integrityScore >= 60 ? "bg-yellow-100 text-yellow-800" : "bg-red-100 text-red-800"
                  )}>
                    <Target className="h-3 w-3" />
                    Integrity: {integrityScore}%
                  </Badge>
                </div>
              </div>
            </div>

            <div className="flex items-center gap-3">
              {!isInitialized ? (
                <Button onClick={initializeMonitoring}>
                  <Settings className="h-4 w-4 mr-2" />
                  Initialize Systems
                </Button>
              ) : !isMonitoring ? (
                <Button onClick={startMonitoring} className="bg-green-600 hover:bg-green-700">
                  <Play className="h-4 w-4 mr-2" />
                  Start Monitoring
                </Button>
              ) : (
                <Button onClick={stopMonitoring} variant="destructive">
                  <Square className="h-4 w-4 mr-2" />
                  Stop Monitoring
                </Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Real-time Status */}
      {isInitialized && (
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
          {getMonitoringStatus().map((check, index) => {
            const IconComponent = check.icon;
            return (
              <Card key={index} className={cn(
                "border-2 transition-all duration-300",
                check.status ? "border-green-200 bg-green-50" : "border-red-200 bg-red-50"
              )}>
                <CardContent className="p-4 text-center">
                  <IconComponent className={cn(
                    "h-6 w-6 mx-auto mb-2",
                    check.status ? "text-green-600" : "text-red-600"
                  )} />
                  <div className="text-sm font-medium">{check.name}</div>
                  <div className={cn(
                    "text-xs",
                    check.status ? "text-green-600" : "text-red-600"
                  )}>
                    {check.status ? 'OK' : 'Alert'}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={(value: any) => setActiveTab(value)}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="monitor">Live Monitor</TabsTrigger>
          <TabsTrigger value="violations">
            Violations ({violations.length})
          </TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
          <TabsTrigger value="settings">Settings</TabsTrigger>
        </TabsList>

        {/* Live Monitor Tab */}
        <TabsContent value="monitor" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Video Feed */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Camera className="h-5 w-5" />
                  Live Camera Feed
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="relative">
                  <video
                    ref={videoRef}
                    autoPlay
                    muted
                    className="w-full h-64 bg-gray-900 rounded-lg object-cover"
                    style={{ transform: 'scaleX(-1)' }}
                  />
                  <canvas ref={canvasRef} className="hidden" />
                  
                  {/* Overlay indicators */}
                  <div className="absolute top-3 left-3 flex gap-2">
                    <Badge className={cn(
                      "flex items-center gap-1",
                      faceDetected ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
                    )}>
                      <User className="h-3 w-3" />
                      Face {faceDetected ? 'Detected' : 'Missing'}
                    </Badge>
                  </div>

                  <div className="absolute top-3 right-3 flex gap-2">
                    <Badge className={cn(
                      "flex items-center gap-1",
                      eyeContactMaintained ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800"
                    )}>
                      <Eye className="h-3 w-3" />
                      Eyes {eyeContactMaintained ? 'Focused' : 'Distracted'}
                    </Badge>
                  </div>

                  {isMonitoring && (
                    <div className="absolute bottom-3 left-3">
                      <Badge className="bg-red-100 text-red-800 animate-pulse">
                        <div className="w-2 h-2 bg-red-500 rounded-full mr-2"></div>
                        Recording
                      </Badge>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* System Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Brain className="h-5 w-5" />
                  AI Analysis
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {currentSession && (
                  <>
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-medium">Behavior Pattern</span>
                        <Badge variant="outline">
                          {currentSession.behaviorAnalysis.typingPattern}
                        </Badge>
                      </div>
                      <div className="text-xs text-gray-600">
                        Keystroke analysis and timing patterns
                      </div>
                    </div>

                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-medium">Eye Movement</span>
                        <Badge variant="outline">
                          {currentSession.behaviorAnalysis.eyeMovementPattern}
                        </Badge>
                      </div>
                      <div className="text-xs text-gray-600">
                        Gaze tracking and attention analysis
                      </div>
                    </div>

                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-medium">Facial Expression</span>
                        <Badge variant="outline">
                          {currentSession.behaviorAnalysis.facialExpression}
                        </Badge>
                      </div>
                      <div className="text-xs text-gray-600">
                        Emotion and stress level detection
                      </div>
                    </div>

                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-medium">Response Time</span>
                        <Badge variant="outline">
                          {currentSession.behaviorAnalysis.averageResponseTime}s
                        </Badge>
                      </div>
                      <div className="text-xs text-gray-600">
                        Average time between questions
                      </div>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Recent Violations */}
          {violations.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Flag className="h-5 w-5" />
                  Recent Violations
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {violations.slice(-5).reverse().map((violation) => {
                    const IconComponent = getViolationIcon(violation.type);
                    return (
                      <div key={violation.id} className="flex items-center gap-3 p-3 border rounded-lg">
                        <IconComponent className="h-5 w-5 text-red-500" />
                        <div className="flex-1">
                          <div className="flex items-center gap-2">
                            <span className="font-medium">{violation.description}</span>
                            <Badge className={cn("text-xs border", getSeverityColor(violation.severity))}>
                              {violation.severity}
                            </Badge>
                          </div>
                          <div className="text-sm text-gray-500">
                            {formatDistanceToNow(violation.timestamp, { addSuffix: true })}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Violations Tab */}
        <TabsContent value="violations" className="space-y-6">
          {/* Violation Summary */}
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            {Object.entries(getViolationStats()).map(([key, value]) => (
              <Card key={key}>
                <CardContent className="p-4 text-center">
                  <div className="text-2xl font-bold text-gray-900">{value}</div>
                  <div className="text-sm text-gray-600 capitalize">{key}</div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Violations List */}
          <Card>
            <CardHeader>
              <CardTitle>All Violations</CardTitle>
            </CardHeader>
            <CardContent>
              {violations.length > 0 ? (
                <div className="space-y-3">
                  {violations.map((violation) => {
                    const IconComponent = getViolationIcon(violation.type);
                    return (
                      <div key={violation.id} className="flex items-start gap-3 p-4 border rounded-lg">
                        <IconComponent className="h-5 w-5 text-red-500 mt-0.5" />
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="font-medium">{violation.description}</span>
                            <Badge className={cn("text-xs border", getSeverityColor(violation.severity))}>
                              {violation.severity}
                            </Badge>
                            {violation.autoGenerated && (
                              <Badge variant="outline" className="text-xs">
                                <Brain className="h-3 w-3 mr-1" />
                                AI Detected
                              </Badge>
                            )}
                          </div>
                          <div className="text-sm text-gray-500 mb-2">
                            {violation.timestamp.toLocaleString()}
                          </div>
                          <div className="flex gap-2">
                            <Button size="sm" variant="outline">
                              <Eye className="h-4 w-4 mr-2" />
                              Review
                            </Button>
                            <Button size="sm" variant="outline">
                              <Download className="h-4 w-4 mr-2" />
                              Evidence
                            </Button>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-center py-8">
                  <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Violations Detected</h3>
                  <p className="text-gray-600">The exam is proceeding without any integrity issues.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4 text-center">
                <Shield className="h-8 w-8 text-blue-500 mx-auto mb-2" />
                <div className="text-2xl font-bold text-gray-900">{integrityScore}%</div>
                <div className="text-sm text-gray-600">Integrity Score</div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <Eye className="h-8 w-8 text-green-500 mx-auto mb-2" />
                <div className="text-2xl font-bold text-gray-900">94%</div>
                <div className="text-sm text-gray-600">Attention Rate</div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <Clock className="h-8 w-8 text-purple-500 mx-auto mb-2" />
                <div className="text-2xl font-bold text-gray-900">42m</div>
                <div className="text-sm text-gray-600">Session Duration</div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <Brain className="h-8 w-8 text-orange-500 mx-auto mb-2" />
                <div className="text-2xl font-bold text-gray-900">127</div>
                <div className="text-sm text-gray-600">AI Checks</div>
              </CardContent>
            </Card>
          </div>

          {/* Behavior Timeline */}
          <Card>
            <CardHeader>
              <CardTitle>Behavior Timeline</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="text-center py-8 text-gray-500">
                  <BarChart3 className="h-12 w-12 mx-auto mb-4" />
                  <p>Detailed behavior analytics would be displayed here</p>
                  <p className="text-sm">Including attention patterns, typing rhythm, and violation trends</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Settings Tab */}
        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Proctoring Configuration</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h4 className="font-medium">Detection Settings</h4>
                  
                  {[
                    { key: 'faceDetection', label: 'Face Detection', description: 'Monitor student presence' },
                    { key: 'eyeTracking', label: 'Eye Tracking', description: 'Track attention and focus' },
                    { key: 'audioMonitoring', label: 'Audio Monitoring', description: 'Detect suspicious sounds' },
                    { key: 'multiplePersonDetection', label: 'Multiple Person Detection', description: 'Identify unauthorized individuals' }
                  ].map((setting) => (
                    <div key={setting.key} className="flex items-center justify-between p-3 border rounded-lg">
                      <div>
                        <div className="font-medium">{setting.label}</div>
                        <div className="text-sm text-gray-600">{setting.description}</div>
                      </div>
                      <Button
                        variant={settings[setting.key as keyof ProctoringSettings] ? "default" : "outline"}
                        size="sm"
                        onClick={() => setSettings(prev => ({
                          ...prev,
                          [setting.key]: !prev[setting.key as keyof ProctoringSettings]
                        }))}
                      >
                        {settings[setting.key as keyof ProctoringSettings] ? 'Enabled' : 'Disabled'}
                      </Button>
                    </div>
                  ))}
                </div>

                <div className="space-y-4">
                  <h4 className="font-medium">Security Settings</h4>
                  
                  {[
                    { key: 'screenRecording', label: 'Screen Recording', description: 'Record entire session' },
                    { key: 'fullScreenEnforcement', label: 'Full Screen Mode', description: 'Require full screen' },
                    { key: 'tabSwitchingDetection', label: 'Tab Switch Detection', description: 'Monitor browser tabs' },
                    { key: 'identityVerification', label: 'Identity Verification', description: 'Verify student identity' }
                  ].map((setting) => (
                    <div key={setting.key} className="flex items-center justify-between p-3 border rounded-lg">
                      <div>
                        <div className="font-medium">{setting.label}</div>
                        <div className="text-sm text-gray-600">{setting.description}</div>
                      </div>
                      <Button
                        variant={settings[setting.key as keyof ProctoringSettings] ? "default" : "outline"}
                        size="sm"
                        onClick={() => setSettings(prev => ({
                          ...prev,
                          [setting.key]: !prev[setting.key as keyof ProctoringSettings]
                        }))}
                      >
                        {settings[setting.key as keyof ProctoringSettings] ? 'Enabled' : 'Disabled'}
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

export default AIExamProctoring;